'From MIT Squeak 0.9.4 (June 1, 2003) [No updates present.] on 27 August 2016 at 7:57:44 pm'!"Change Set:		RSPRoverDate:			27 August 2016Author:			EiichiroItoThis is change file of RSPRover(Remote Sensor Protocol Rover) program"!Object subclass: #Base64Decoder	instanceVariableNames: 'out in '	classVariableNames: 'DecoderTable '	poolDictionaries: ''	category: 'Decoder-Base64'!Object subclass: #Base64Encoder	instanceVariableNames: 'out in count '	classVariableNames: 'DecoderTable EncoderTable '	poolDictionaries: ''	category: 'Decoder-Base64'!Object subclass: #ScratchServer	instanceVariableNames: 'stage userName serverSocket incomingUDPSocket peerSockets peerNames sensors lastSentValues incomingBroadcasts outgoingBroadcasts in broadcastCache cameraForm '	classVariableNames: ''	poolDictionaries: ''	category: 'Scratch-Networking'!!Base64Decoder methodsFor: 'private' stamp: 'EiichiroIto 8/27/2016 10:00'!decode	| t1 t2 t3 t4 t5 t6 t7 t8 |	[true]		whileTrue: 			[t1 _ self next.			t1 ifNil: [^ self].			t2 _ self next.			t2 ifNil: [^ self].			t5 _ self class decoderTable at: t1.			t6 _ self class decoderTable at: t2.			self put: (t5 << 2 bitOr: t6 >> 4).			t3 _ self next.			t3 ifNil: [^ self].			t7 _ self class decoderTable at: t3.			self put: ((t6 bitAnd: 15)					<< 4 bitOr: t7 >> 2).			t4 _ self next.			t4 ifNil: [^ self].			t8 _ self class decoderTable at: t4.			self put: ((t7 bitAnd: 3)					<< 6 bitOr: t8)]! !!Base64Decoder methodsFor: 'private' stamp: 'EiichiroIto 8/27/2016 10:00'!next	| t1 |	in atEnd ifTrue: [^ nil].	t1 _ in next.	t1 = $= ifTrue: [^ nil].	^ t1! !!Base64Decoder methodsFor: 'private' stamp: 'EiichiroIto 8/27/2016 10:00'!put: t1 	out nextPut: t1! !!Base64Decoder methodsFor: 'accessing' stamp: 'EiichiroIto 8/27/2016 10:00'!decode: t1 	in _ ReadStream on: t1.	out _ WriteStream on: ByteArray new.	self decode.	^ out contents! !!Base64Decoder class methodsFor: 'initialization' stamp: 'EiichiroIto 8/27/2016 10:00'!initialize	DecoderTable _ nil! !!Base64Decoder class methodsFor: 'private' stamp: 'EiichiroIto 8/27/2016 10:00'!defaultDecoderTable	^ Dictionary newFrom: ('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' asArray withIndexCollect: [:t1 :t2 | t1 -> (t2 - 1)])! !!Base64Decoder class methodsFor: 'private' stamp: 'EiichiroIto 8/27/2016 10:00'!testDecodingString	^ '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'! !!Base64Decoder class methodsFor: 'tests' stamp: 'EiichiroIto 8/27/2016 10:00'!testDecoding	| t1 t2 t3 |	t1 _ Base64Decoder new decode: self testDecodingString.	t2 _ FastJPEG uncompress: t1.	t3 _ ImageMorph new form: t2.	t3 openInWorld! !!Base64Decoder class methodsFor: 'accessing' stamp: 'EiichiroIto 8/27/2016 10:00'!decoderTable	^ DecoderTable ifNil: [DecoderTable _ self defaultDecoderTable]! !!Base64Encoder methodsFor: 'private' stamp: 'EiichiroIto 8/27/2016 10:00'!encode	| t1 t2 |	[true]		whileTrue: 			[t1 _ self next.			t1 ifNil: [^ self].			t2 _ t1 >> 2.			self put: (self class encoderTable at: t2 + 1).			t2 _ (t1 bitAnd: 3)						<< 4.			t1 _ self next.			t1 ifNil: [^ self put: (self class encoderTable at: t2 + 1)].			t2 _ t2 bitOr: t1 >> 4.			self put: (self class encoderTable at: t2 + 1).			t2 _ (t1 bitAnd: 15)						<< 2.			t1 _ self next.			t1 ifNil: [^ self put: (self class encoderTable at: t2 + 1)].			t2 _ t2 bitOr: t1 >> 6.			self put: (self class encoderTable at: t2 + 1).			t2 _ t1 bitAnd: 63.			self put: (self class encoderTable at: t2 + 1)]! !!Base64Encoder methodsFor: 'private' stamp: 'EiichiroIto 8/27/2016 10:00'!next	in atEnd ifTrue: [^ nil].	^ in next! !!Base64Encoder methodsFor: 'private' stamp: 'EiichiroIto 8/27/2016 10:00'!put: t1 	out nextPut: t1.	count _ count + 1 \\ 4! !!Base64Encoder methodsFor: 'accessing' stamp: 'EiichiroIto 8/27/2016 10:00'!encode: t1 	in _ ReadStream on: t1.	out _ WriteStream on: String new.	count _ 0.	self encode.	count > 0 ifTrue: [4 - count timesRepeat: [self put: $=]].	^ out contents! !!Base64Encoder class methodsFor: 'initialization' stamp: 'EiichiroIto 8/27/2016 10:00'!initialize	EncoderTable _ nil! !!Base64Encoder class methodsFor: 'accessing' stamp: 'EiichiroIto 8/27/2016 10:00'!encoderTable	^ EncoderTable ifNil: [EncoderTable _ self defaultEncoderTable]! !!Base64Encoder class methodsFor: 'private' stamp: 'EiichiroIto 8/27/2016 10:00'!defaultEncoderTable	^ 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' asArray! !!Base64Encoder class methodsFor: 'tests' stamp: 'EiichiroIto 8/27/2016 10:00'!testEncoding1	| t1 t2 |	t1 _ #(65 66 67 68 69 70 71 ).	t2 _ Base64Encoder new encode: t1.	self assert: [t2 = 'QUJDREVGRw=='].	^ t2! !!ScratchFrameMorph methodsFor: 'intialization'!createMenuPanel	"Create and add a panel containing the menus and close button."	| menuSpecs m |	"create panel"	menuPanel _ AlignmentMorph new		color: Color transparent;		centering: #center;		inset: 0;		height: 0.	"will grow as needed"	self addShortcutButtonsTo: menuPanel.	"menuSpecs defines the menus"	menuSpecs _ #(		"name			selector"		(File			fileMenu:)		(Edit			editMenu:)		(Share			shareMenu:)		(Help			helpMenu:)	).	menuSpecs do: [:spec |		m _ ScratchMenuTitleMorph new			contents: (spec at: 1) localized;			target: self selector: (spec at: 2).		menuPanel addMorphBack: m.		#helpMenu: = (spec at: 2) ifFalse: [			menuPanel addMorphBack: (Morph new color: Color transparent; extent: 12@5)]].	topPane addMorph: menuPanel.! !!ScratchFrameMorph methodsFor: 'menu/button actions'!addServerCommandsTo: menu	"Add Scratch server commands to the given menu."	| disable endCmd |	disable _ false.  "make this true to disable this feature"	disable ifTrue: [^ self].	menu addLine.	(workPane scratchServer notNil and:	 [workPane scratchServer sessionInProgress])		ifTrue: [			menu add: 'Show IP Address' action: #showNetworkAddress.			endCmd _ workPane scratchServer isHosting				ifTrue: ['Stop Hosting Mesh']				ifFalse: ['Leave Mesh'].			menu add: endCmd action: #exitScratchSession]		ifFalse: [			menu add: 'Host Mesh' action: #startHostingScratchSession.			menu add: 'Join Mesh' action: #joinScratchSession].! !!ScratchFrameMorph methodsFor: 'menu/button actions'!shareMenu: aMenuTitleMorph 	| menu |	menu _ CustomMenu new.	self addServerCommandsTo: menu.	menu localize.	menu invokeOn: self at: aMenuTitleMorph bottomLeft + (0 @ 10)! !!ScratchServer methodsFor: 'accessing' stamp: 'EiichiroIto 8/27/2016 19:07'!cameraForm	^ cameraForm! !!ScratchServer methodsFor: 'private-incoming commands'!dispatch: aString from: requestSock	"Dispatch an incoming command from a remote Scratch."	| cmd op |	aString size = 0 ifTrue: [		requestSock sendMessage: 'version "ScratchServer 2.0 alpha"'.		^ self].	op _ self opcodeFrom: aString.	op size = 0 ifTrue: [^ self].	(#('broadcast' 'sensor-update' 'peer-name' 'send-vars' 'jpg') includes: op) ifFalse: [^ self].	cmd _ self parse: aString.	'broadcast' = op ifTrue: [		self doBroadcast: cmd from: requestSock.		^ self resend: aString toPeersExcept: requestSock].	'sensor-update' = op ifTrue: [		self doSensorUpdate: cmd from: requestSock.		^ self resend: aString toPeersExcept: requestSock].	'peer-name' = op ifTrue: [^ self doPeerName: cmd from: requestSock].	'send-vars' = op ifTrue: [		self doSendVars: cmd from: requestSock.		^ self resend: aString toPeersExcept: requestSock].	'jpg' = op ifTrue: [		self doCamera: cmd from: requestSock.		^ self resend: aString toPeersExcept: requestSock].! !!ScratchServer methodsFor: 'private-incoming commands'!doCamera: cmd from: requestSocket 	| b64Data rawData |	cmd size = 2 ifFalse: [^ self].	((b64Data _ cmd at: 2) isKindOf: String)		ifFalse: [^ self].	rawData _ Base64Decoder new decode: b64Data.	cameraForm _ FastJPEG uncompress: rawData! !!ScratchSpriteMorph methodsFor: 'looks ops'!getRemoteImage	| form |	owner scratchServer ifNil: [^ self].	form _ owner scratchServer cameraForm.	form ifNil: [^ self].	costume form: form.	self costumeChanged! !!ScratchSpriteMorph class methodsFor: 'block specs'!blockSpecs	| blocks |	blocks _ #(		'motion'			('move %n steps'				-	forward:)			('turn %n degrees'				-	turnRight: 15)	"icon shows turn direction"			('turn %n degrees'				-	turnLeft: 15)	"icon shows turn direction"			-			('point in direction %d'			-	heading: 90)			('point towards %m'				-	pointTowards:)			-			('go to x:%n y:%n'				-	gotoX:y: 0 0)			('go to %m'						-	gotoSpriteOrMouse:)			('glide %n secs to x:%n y:%n'	t	glideSecs:toX:y:elapsed:from: 1 50 50)			-			('change x by %n'				-	changeXposBy: 10)			('set x to %n'					-	xpos: 0)			('change y by %n'				-	changeYposBy: 10)			('set y to %n'					-	ypos: 0)			-			('if on edge, bounce'			-	bounceOffEdge)			-			('x position'						r	xpos)			('y position'						r	ypos)			('direction'						r	heading)		'pen'			('clear'							-	clearPenTrails)			-			('pen down'						-	putPenDown)			('pen up'						-	putPenUp)			-			('set pen color to %c'			-	penColor:)			('change pen color by %n'		-	changePenHueBy:)			('set pen color to %n'			-	setPenHueTo: 0)			-			('change pen shade by %n'		-	changePenShadeBy:)			('set pen shade to %n'			-	setPenShadeTo: 50)			-			('change pen size by %n'		-	changePenSizeBy: 1)			('set pen size to %n'				-	penSize: 1)			-			('stamp'							-	stampCostume)	).	blocks _ blocks, #(		'looks'			('switch to costume %l'			-	lookLike:)			('next costume'					-	nextCostume)			('costume #'						r	costumeIndex)			('get remote image' 				-	getRemoteImage)			-			('say %s for %n secs'			t	say:duration:elapsed:from: 'Hello!!' 2)			('say %s'						-	say: 'Hello!!')			('think %s for %n secs'			t	think:duration:elapsed:from: 'Hmm...' 2)			('think %s'						-	think: 'Hmm...')			-			('change %g effect by %n'		-	changeGraphicEffect:by: 'color' 25)			('set %g effect to %n'			-	setGraphicEffect:to: 'color' 0)			('clear graphic effects'			-	filterReset)			-			('change size by %n'			-	changeSizeBy:)			('set size to %n%'				-	setSizeTo: 100)			('size'							r	scale)			-			('show'							-	show)			('hide'							-	hide)			-			('go to front'					-	comeToFront)			('go back %n layers'			-	goBackByLayers: 1)		'sensing'			('touching %m?' 				b	touching:)			('touching color %C?' 			b	touchingColor:)			('color %C is touching %C?'		b	color:sees:)			-			('ask %s and wait'				s	doAsk 'What''s your name?')			('answer'						r	answer)			-			('mouse x'						r	mouseX)			('mouse y'						r	mouseY)			('mouse down?'					b	mousePressed)			-			('key %k pressed?'				b	keyPressed: 'space')			-			('distance to %m'				r	distanceTo:)			-			('reset timer'					-	timerReset)			('timer'							r	timer)			-			('%a of %m'						r	getAttribute:of:)			-			('loudness'						r	soundLevel)			('loud?'							b	isLoud)			~			('%H sensor value'				r	sensor: 'slider')			('sensor %h?'					b	sensorPressed: 'button pressed')		).	^ blocks, super blockSpecs! !Base64Encoder initialize!Base64Decoder initialize!